<?xml version="1.0" encoding="utf-8"?>

<!--

  	MXML Demo 5 - MXML as Action Sequencer 
		
	@author David Knape

-->

<ui:Application 
	xmlns:fx="http://ns.adobe.com/mxml/2009" 
	xmlns:ui="com.bumpslide.ui.*"
	xmlns:c="commands.*"
	xmlns:asset="*"
	creationComplete="setup()"
	enterFrame="loop()"
	>
	<fx:Script>
		<![CDATA[

			import commands.*;

			import vo.TurtleModel;

			import com.bumpslide.events.DragEvent;
			import com.bumpslide.tween.FTween;
			import com.bumpslide.ui.behavior.DragBehavior;
			import com.bumpslide.util.ObjectUtil;
			
			
			private var turtle:TurtleModel = new TurtleModel();

			private var dragControl:DragBehavior;
					
			private function setup():void
			{
				// Make the turtle draggable
				dragControl = DragBehavior.init( turtleSprite );
				turtleSprite.addEventListener( DragEvent.EVENT_DRAG_START, handleDragStart );
				turtleSprite.addEventListener( DragEvent.EVENT_DRAG_STOP, handleDragStop );
				
				turtle.bind( 'x', turtleSprite );			
				turtle.bind( 'y', turtleSprite );
				turtle.bind( 'rotation', turtleSprite );
				
				this.stage.frameRate = 60;			
				
				reset();
			}


			private function handleDragStart( event:DragEvent ):void
			{
				runCommand( SetRotation, { value: 0 } );
			}


			private function handleDragStop( event:DragEvent ):void
			{
				FTween.stopTweening( turtle );
				turtle.x = turtleSprite.x;
				turtle.y = turtleSprite.y;
				graphics.moveTo( turtle.x, turtle.y );
			}
							
			private function runCommand( commandClass:Class, params:Object=null ):void {
				var c:ITurtleInstruction = ObjectUtil.create( commandClass, params );
				c.turtle = turtle;
				c.execute();
			}


			private function loop():void
			{
				if (turtle.penDown && dragControl && !dragControl.isDragging) {
					
					graphics.lineTo( turtle.x, turtle.y );
				}
			}


			private function reset():void
			{
				trace('reset');
				FTween.stopTweening( turtle );
				
				turtle.rotation = 0;
				turtle.x = 200;
				turtle.y = 200;
				turtle.penDown = true;
				
				graphics.clear();
				graphics.lineStyle( 3, 0x880000 );
				graphics.moveTo( turtle.x, turtle.y );
				
				
			}

		]]>
	</fx:Script>
	
	<asset:TurtleGraphic id="turtleSprite" x="200" y="200" rotation="0" />	
	
	
	<ui:Container x="20" y="20" layout="vertical">
		
		<ui:Container>
			<ui:Button label="Left" click="runCommand( Turn, { angle: -45 } )" />
			<ui:Button label="Right" click="runCommand( Turn, { angle: 45 }  )" />
			<ui:Button label="Forward" click="runCommand( Forward, { distance: 50 }  )" />
			<ui:Button label="Back" click="runCommand( Forward, { distance: -50 }  )" />
			<ui:Button label="Clear" click="reset()" />
		</ui:Container>
		
		<ui:Container>
			<ui:Button label="Pen Down" click="runCommand( PenDown )" />
			<ui:Button label="Pen Up" click="runCommand( PenUp )" />
			<ui:Button label="Square" click="runCommand( Square )" />
			<ui:Button label="Zig Zag" click="runCommand( ZigZag )" />	
			<ui:Button label="Jump" click="runCommand( Jump )" />	
		</ui:Container>
		
	</ui:Container>
	
	
	
</ui:Application>